// ConsoleApplication1.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <cv.h>
#include <highgui.h>
#include <stdlib.h>
#include <stdio.h>
#include <imgproc.hpp>

#include <opencv2/opencv.hpp>
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include <iostream>
#include <string>
#include <windows.h>

#include <vector>

using namespace cv;
using namespace std;

void get_input(short* ishow_screen, short* iexit, short* x_crop, short* width, short* y_crop, short* height);
void get_point(Mat frame, short blog, short red_min, short red_max, short green_min, short green_max, short blue_min, short blue_max);

int sum(cv::Mat image, short pix_thresh, short sum_step)
{
	int sum(0);
	for (int y(0); y < image.rows; y += sum_step)
	{

		for (int x(0); x < 3*image.cols; x += sum_step)
		{
			int tmp = image.at<unsigned char>(y, x);
			if (tmp < pix_thresh)
			{
				sum += tmp;
				image.at<unsigned char>(y, x) = 255;
			}
		}
		//cout << endl;
 	}
	//getchar();
	return sum;
}

/*
Mat thresh(cv::Mat image, short pix_thresh)
{
	for (int y(0); y < image.rows; y += 1)
	{
		;
		
		for (int x(0); x < image.cols; x += 1)
		{
			int tmp = image.at<unsigned char>(y, x);
			//if (tmp < pix_thresh) image.at<unsigned char>(y, x) = 250;
		}
		//cout << endl;
	}
	//getchar();
	return image;
}
*/
int _tmain(int argc, _TCHAR* argv[])
{
	string img_name = "./img/2.png";

	short index_camera = 0;
	short ishow_screen = 3;
	short iexit = 0;
	short time_shut_min = 3;
	short pix_thresh = 120;
	short multy = 5;
	short sum_step = 4;
	short blog = 1;

	short x_crop = 210,
		width = 208,
		y_crop = 126,
		height = 200;

	short x_point = 210,
		width_point = 208,
		y_point = 126,
		height_point = 200;

	printf(" Controls: \n   s/o                = shut/open \n   c                  = camera \n   up/down/left/right = center crop \n   num 4/8/6/2        = width/heght \n   z                  = console \n   num 7/9            = threshold -/+ \n   num 1/3            = delay -/+ \n   ESC                = Adios! \n");
	printf("   q/w                = sum_step +/- \n   l                  = logs on/off \n\n");

	cv::VideoCapture stream1(index_camera); //CV_CAP_ANY);   //0 is the id of video device.0 if you have only one camera.

	if (!stream1.isOpened())
	{ //check if video device has been initialised
		printf("cannot open camera");
		getchar();
	}

	//stream1.set(CV_CAP_PROP_FRAME_HEIGHT,600); //does'nt work
	cout << "camera : " << index_camera << endl;
	cout << "current resolution :" << stream1.get(CV_CAP_PROP_FRAME_WIDTH) << "x" << stream1.get(CV_CAP_PROP_FRAME_HEIGHT) << endl;

	//stream1.set(CV_CAP_PROP_AUTO_EXPOSURE, 2);
	//stream1.set(CV_CAP_PROP_EXPOSURE, 5);
	//stream1.set(CV_CAP_PROP_AUTO_EXPOSURE, 0);
	//stream1.set(5, 30);
	//stream1.set(15, 0.1);

	cout << "FPS: " << stream1.get(CV_CAP_PROP_FPS) << ";  AUTO_EXPOSURE: " << stream1.get(CV_CAP_PROP_AUTO_EXPOSURE) << ";  EXP: " << stream1.get(CV_CAP_PROP_EXPOSURE) << endl;
	stream1.set(CV_CAP_PROP_AUTO_EXPOSURE, 21);
	//stream1.set(CV_CAP_PROP_FRAME_WIDTH, 1024);
	//^stream1.set(CV_CAP_PROP_FRAME_HEIGHT, 768);
	//stream1.set(CV_CAP_PROP_BRIGHTNESS, );
	//stream1.set(5, 20);
	stream1.set(CV_CAP_PROP_CONVERT_RGB, false);
	stream1.set(CV_CAP_PROP_FPS, 60);
	//stream1.set(CV_CAP_PROP_BRIGHTNESS, 0);
	//getchar();

	int frame_no = 0;
	double fps = -1;
	//char c_input;

	int k = 0;
	int summa = 0;
	int sum_shut = 0;
	int sum_open = 0;
	short time_shut = 0;

	bool bSuccess = false;
	Mat frame, frame1, gray;

	Rect myROI(x_crop, y_crop, width, height);
	Rect pointROI(x_point, y_point, width_point, height_point);

	/*Mat image;
	image = imread(img_name, CV_LOAD_IMAGE_COLOR);
	if (!image.data)       // Check for invalid input
	{
		cout << "Could not open or find the image" << std::endl;
		return -1;
	}*/

	//contours
	int minimum_points = 50;
	//cv::vector<vector<Point> > contours;

	//-----------

	while (1)
	{
		//stream1.set(15, -100);
		//cout << "FPS: " << stream1.get(CV_CAP_PROP_FPS) << ";  AUTO_EXPOSURE: " << stream1.get(CV_CAP_PROP_AUTO_EXPOSURE) << ";  EXP: " << stream1.get(CV_CAP_PROP_EXPOSURE) << endl;

		stream1.set(CV_CAP_PROP_EXPOSURE, -7);//time_shut_min);
		//stream1.set(CV_CAP_PROP_ISO_SPEED, time_shut_min);
		//image = imread(img_name, CV_LOAD_IMAGE_COLOR);
		bSuccess = stream1.read(frame);
		frame = imread(img_name, CV_LOAD_IMAGE_COLOR);

		//cvtColor(frame, frame, COLOR_BGR2GRAY);
		//cvtColor(frame, gray, COLOR_BGR2GRAY);
		//Canny(gray, gray, 100, 200, 3);
		//typedef vector<vector<cv::Point> > TContours;
		//TContours contours;
		//vector<cv::Vec4i> hierarchy ;
		//medianBlur(gray, gray, 5);
		//adaptiveThreshold(gray, gray, 255, ADAPTIVE_THRESH_GAUSSIAN_C, THRESH_BINARY, 11, 2);
		//Mat gr_th;
		//threshold(gray, gr_th, 0, 255, THRESH_BINARY_INV );

		//Mat contourOutput;// = frame.clone();
		//Canny(gray, gr_th, 0, 255, 3);

	//	Mat cv_mat = gray.clone();
//		findContours(cv_mat, contours, hierarchy, CV_RETR_TREE, CV_CHAIN_APPROX_NONE);
		
		//drawContours(gray);

		//frame = image;
		/*
		if (!bSuccess) //if not success, break loop
		{
			cout << "Cannot read the frame from video file" << endl;
			getchar();
			break;
		}*/

		//cout << c_input << endl;
		cout << k << endl;

		//frame = thresh(frame(myROI), pix_thresh);
		// добавочная величина 
//		int add = argc >= 7 ? atoi(argv[6]) : 200;

		//cvAddS(frame, cvScalar(add), frame);
		//threshold(frame, frame, pix_thresh, 255, 4);//4
		summa = sum(frame(myROI), pix_thresh, sum_step);
		//cout << "SUM = " << sum(frame(myROI)) << endl;
		int red_max = 256,
			green_max = 50,
			blue_max = 50;

		int red_min = 130,
			green_min = -1,
			blue_min = -11;

		//void get_point(Mat frame, short blog, short red_min, short red_max, short green_min, short green_max, short blue_min, short blue_max)
		get_point(frame(myROI), blog, 130, 256, -1, 50, -1, 50);

		//c_input = cvWaitKey(33);
		k = cvWaitKey(33);
		switch (k)
		{
			case 122 :
				{
					get_input(&ishow_screen, &iexit, &x_crop, &width, &y_crop, &height);//dfaef(*par, *par1);
					myROI = Rect(x_crop, y_crop, width, height);
					cout << "x" << x_crop << "," << width << "  y" << y_crop << "," << height << endl;
				}
				break;
			case 2490368:
				{
					y_crop--;
					myROI = Rect(x_crop, y_crop, width, height);
					if (blog == 1) cout << "Y" << y_crop << endl;
				}
				break;
			case 2621440:
				{
					y_crop++;
					myROI = Rect(x_crop, y_crop, width, height);
					if (blog == 1) cout << "Y" << y_crop << endl;
				}
				break;
			case 2555904:
				{
					x_crop++; 
					myROI = Rect(x_crop, y_crop, width, height);
					if (blog == 1) cout << "X" << x_crop << endl;
				}
				break;
			case 2424832:
				{
					x_crop--;
					myROI = Rect(x_crop, y_crop, width, height);
					if (blog == 1) cout << "X" << x_crop << endl;
				}
				break;
			case 56:
				{
					height--;
					myROI = Rect(x_crop, y_crop, width, height);
					cout << "He" << height << endl;
				}
				break;
			case 50:
				{
					height++;
					myROI = Rect(x_crop, y_crop, width, height);
					cout << "He" << height << endl;
				}
				break;
			case 54:
				{
					width--;
					myROI = Rect(x_crop, y_crop, width, height);
					cout << "Wi" << width << endl;
				}
				break;
			case 52:
				{
					width++;
					myROI = Rect(x_crop, y_crop, width, height);
					cout << "Wi" << width << endl;
				}
				break;
			case 115://s
				{
					sum_shut = summa;
					cout << "SHUT = " << sum_shut << endl;
				}
				break;
			case 111://o
				{
					sum_open = summa;
					cout << "OPEN = " << sum_open << endl;
				}
				break;
			case 99://c
				{
						if (ishow_screen == 1)
							ishow_screen = 2;
						else if (ishow_screen == 2)
							ishow_screen = 3;
						else if (ishow_screen == 3)
							ishow_screen = 0;
						else ishow_screen = 1;
				}
				break;
			case 55://num7
			{
						pix_thresh--;
						cout << "Threshold = " << pix_thresh << endl;
			}
				break;
			case 57://num9
			{
						pix_thresh++;
						cout << "Threshold = " << pix_thresh << endl;
			}
				break;
			case 27://ESC
			{
						cout << "!Hasta luego1" << endl;
						return 0;
			}
				break;
			case 49://num1
			{
						cout << "Time_shut_min = " << time_shut_min << endl;
						time_shut_min--;
			}
				break;
			case 51://num3
			{
						cout << "Time_shut_min = " << time_shut_min << endl;
						time_shut_min++;
			}
				break;
			case 108://l
			{
						 if (blog == 1)
						 {
							 blog = 0;
							 cout << "Logs off now" << endl;
						 }
						 else
						 {
							 blog = 1;
							 cout << "Logs off now" << endl;
						 }
			}
				break;
			case 113://q
			{
						if(sum_step > 1)
							sum_step--;
						cout << "Sum_step = " << sum_step << endl;
			}
				break;
			case 119://w
			{
						sum_step++;
						cout << "Sum_step = " << sum_step << endl;
			}
				break;
			default:
				break;
		}//switch(k)
		
		if (abs(summa - sum_open) > multy * abs(summa - sum_shut))
		{   
			//cout <<  "Ts" << time_shut  << "difffer" << endl;
			time_shut++;
			if (time_shut == time_shut_min)
			{
				keybd_event(VK_SPACE, 0, 0, 0);
				keybd_event(VK_SPACE, 0, KEYEVENTF_KEYUP, 0);
				cout << " SPACE " << endl; 
			} 
		}
		else time_shut = 0;
		/*
		for (int i = 50; i < 900; i++)
		{
			frame.at<unsigned char>(5, i) = 255;
			frame.at<unsigned char>(6, i) = 255;
		}*/

		//if (iexit == 1) break;
		//if (c_input == 27) break; // If ESC then break;

		//frame_no++;

		//SetImageROI(frame, cvRect(20, 20, 100, 1000));
		//ishow_screen == 1
		switch (ishow_screen)
			{
			case 1:
			{
					  imshow("MyVideo", frame);
			}
				break;
			case 2:
			{
					  Mat frame_cropped = frame(myROI);
					  imshow("MyVideo", frame_cropped);
			}
				break;
			case 3:
			{
					  frame(myROI) += 0.3 * 255;
					  imshow("MyVideo", frame);
			}
			case 0:
			{
					  imshow("MyVideo", frame);
			}
				break;
			default:
			{
					   cout << "Error:" << endl << "screen == " << ishow_screen << endl;
			}
				break;
		}  //switch (ishow_screen)
	}  //while(1)
	return 0;
}

void get_input(short* ishow_screen, short* iexit, short* x_crop, short* width, short* y_crop, short* height)
{
	printf("123\n");

	string  c;
	double a;

	printf("| sc | xc | yc | wi | he |\n Your choise is: ");

	getline(cin, c);

	if (c == "sc")
	{
		cin >> a;
		*ishow_screen = (short)a;
		cout << "Now screen parameter = " << *ishow_screen << endl;
	}
	else if (c == "xc")
	{
		cin >> a;
		*x_crop = (short)a;
		cout << "Now x_crop = " << (int)*x_crop << endl;//a << endl;
	}
	else if (c == "yc")
	{
		cin >> a;
		*y_crop = (short)a;
		cout << "Now y_crop = " << (int)*y_crop << endl;
	}
	else if (c == "wi")
	{
		cin >> a;
		*width = (short)a;
		cout << "Now width = " << (int)*width << endl;
	}
	else if (c == "he")
	{
		cin >> a;
		*height = (short)a;
		cout << "Now height = " << (int)*height << endl;
	}
	else if (c == "exit")
	{
		*iexit = 1;
		cout << " !Hasta luego! " << endl;
	}
	else
		cout << endl << "You've entered:" << c << endl;
}


void get_point(Mat frame, short blog, short red_min, short red_max, short green_min, short green_max, short blue_min, short blue_max)
{
	int col = 0; //BGR
	int m = 0;
	int red = 0,
		green = 0,
		blue = 0;

	int accep = 3;
	double coeff = 0.7;
	double point_x[199] = {0},
		point_y[199] = { 0 };
	int x_sum[199] = { 0 },
		y_sum[199] = { 0 };

	cout << "cols: " << frame.cols << " rows: " << frame.rows << endl;
	
	//center: frame.cols/2, frame.rows*3/2;
	
	/*
	for (short x = 1; x < frame.cols * 3; x++)
	{
		if (col == 2)
		{
			frame.at<unsigned char>(frame.rows / 2, x) = 00;
			frame.at<unsigned char>(frame.rows / 2, x - 1) = 00;
			frame.at<unsigned char>(frame.rows / 2, x - 2) = 00;
			col = 0;
		}
		col++;
	}
	
	for (short y = 1; y < frame.rows; y++)
	{
		frame.at<unsigned char>(y, frame.cols * 3 / 2) = 120;
		frame.at<unsigned char>(y, frame.cols * 3 / 2 + 1) = 120;
		frame.at<unsigned char>(y, frame.cols * 3 / 2 - 1) = 120;
	}*/

	for (short x = frame.cols * 3/2 - 30; x < frame.cols * 3/2 + 31; x++)
	{
		if (col == 2)
		{
			frame.at<unsigned char>(frame.rows / 2, x) = 00;
			frame.at<unsigned char>(frame.rows / 2, x - 1) = 00;
			frame.at<unsigned char>(frame.rows / 2, x - 2) = 00;
			col = 0;
		}
		col++;
	}
	
	for (short y = frame.rows /2 - 10; y < frame.rows /2 + 11; y++)
	{
		frame.at<unsigned char>(y, frame.cols * 3 / 2) = 120;
		frame.at<unsigned char>(y, frame.cols * 3 / 2 + 1) = 120;
		frame.at<unsigned char>(y, frame.cols * 3 / 2 - 1) = 120;
	}
	
	/*short x = frame.cols * 3 / 2,
		  y = frame.rows / 2;
	while (frame.at<unsigned char>(y, x)  > 120 || x > frame.cols + 20)
	{
		x++;
	}*/

	

	cout << "m = " << m << endl;
	for (int i = 0; i < m; i++)
		cout << "x" << point_x[i - 1] / x_sum[i - 1] << " y" << point_y[i - 1] / y_sum[i - 1] << endl;

	//getchar();
}